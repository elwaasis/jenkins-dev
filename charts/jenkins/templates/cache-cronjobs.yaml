{{- /* create map of agents by clearJob.componentName */}}
{{- if .Values.agent.cache.clearJob.create }}
  {{- $_ := set .Values "agentMap" (dict .Values.agent.cache.clearJob.componentName .Values.agent) }}
{{- else }}
  {{- $_ := set .Values "agentMap" (dict) }}
{{- end }}
{{- range $name, $additionalAgent := .Values.additionalAgents }}
    {{- /* merge .Values.agent into additional agent to ensure it at least has the default values */}}
    {{- $mergedAgent := (merge $additionalAgent $.Values.agent) }}
    {{- if $mergedAgent.cache.clearJob.create }}
      {{- if get $.Values.agentMap $mergedAgent.cache.clearJob.componentName }}
        {{- fail "Cannot create more than one clearJob with a given componentName" }}
      {{- else }}
        {{- $_ := set $.Values.agentMap $mergedAgent.cache.clearJob.componentName $mergedAgent }}
      {{- end }}
    {{- end }}
{{- end }}
{{- range $_, $agent := .Values.agentMap }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ tpl ($agent.cache.clearJob.componentName | required "cache clearJob componentName is required") $ }}
  namespace: {{ template "jenkins.master.slaveKubernetesNamespace" $ }}
  labels:
    "app.kubernetes.io/name": '{{ template "jenkins.name" $ }}'
    "helm.sh/chart": "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    "app.kubernetes.io/managed-by": "{{ $.Release.Service }}"
    "app.kubernetes.io/instance": "{{ $.Release.Name }}"
    "app.kubernetes.io/component": "{{ $.Values.master.componentName }}"
spec:
  concurrencyPolicy : "Forbid"
  failedJobsHistoryLimit : 5
  successfulJobsHistoryLimit: 5
  schedule: "{{ $agent.cache.clearJob.schedule }}"
  jobTemplate:
    spec:
      backoffLimit: 6
      template:
        metadata:
          labels:
            "app.kubernetes.io/name": '{{ template "jenkins.name" $ }}'
            "helm.sh/chart": "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
            "app.kubernetes.io/managed-by": "{{ $.Release.Service }}"
            "app.kubernetes.io/instance": "{{ $.Release.Name }}"
            "app.kubernetes.io/component": "{{ $.Values.master.componentName }}"
        spec:
          volumes:
          - name: cache-volume
            persistentVolumeClaim:
              claimName: {{ tpl ($agent.cache.clearJob.claimName | required "cache clear.claimName is required") $ }}
          containers:
          - name: {{ tpl ($agent.cache.clearJob.componentName | required "cache clear componentName is required") $ }}
            image: "{{ $agent.cache.clearJob.image }}:{{ $agent.cache.clearJob.tag }}"
            volumeMounts:
            - mountPath: {{ tpl ($agent.cache.clearJob.mountPath | required "cache mountPath is required") $ }}
              name: cache-volume
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 500m
                memory: 512Mi
            command:
            - /bin/sh
            - -c
            - |
              cd {{ tpl ($agent.cache.clearJob.mountPath | required "cache mountPath is required") $ }}
              {{- tpl $agent.cache.clearJob.command $ | nindent 14 }}
          restartPolicy: OnFailure
{{- end }}
{{- $_ := unset .Values "agentList" }}